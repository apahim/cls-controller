---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cls-controller
  namespace: cls-system
  labels:
    app.kubernetes.io/name: cls-controller
    app.kubernetes.io/component: controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cls-controller
  labels:
    app.kubernetes.io/name: cls-controller
    app.kubernetes.io/component: controller
rules:
# Controller needs to manage ControllerConfig CRDs
- apiGroups:
  - cls.redhat.com
  resources:
  - controllerconfigs
  verbs:
  - get
  - list
  - watch
  - update
  - patch
# Controller needs to create and manage arbitrary Kubernetes resources based on templates
- apiGroups:
  - ""
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - batch
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
# For Config Connector DNS resources
- apiGroups:
  - dns.cnrm.cloud.google.com
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
# For HyperShift resources
- apiGroups:
  - hypershift.openshift.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
# For any other CRDs that might be used in templates
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cls-controller
  labels:
    app.kubernetes.io/name: cls-controller
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cls-controller
subjects:
- kind: ServiceAccount
  name: cls-controller
  namespace: cls-system